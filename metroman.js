// Generated by CoffeeScript 1.3.1
var MetroMan, p;

p = function(o) {
  return "" + o + "%";
};

MetroMan = function(container) {
  this.load = function(config) {
    var aspectRatio, cellHeight, cellWidth, gridConfig, horizontalMargin, lostHorizontalMargin, lostVerticalMargin, verticalMargin;
    config = $.extend({
      grid: {}
    }, config);
    gridConfig = $.extend({
      rows: 4,
      columns: 4,
      margin: 2
    }, config.grid);
    aspectRatio = $(container).height() / $(container).width();
    verticalMargin = gridConfig.margin;
    horizontalMargin = gridConfig.margin * aspectRatio;
    lostVerticalMargin = (gridConfig.rows + 1) * verticalMargin;
    lostHorizontalMargin = (gridConfig.columns + 1) * horizontalMargin;
    cellWidth = (100 - lostHorizontalMargin) / gridConfig.columns;
    cellHeight = (100 - lostVerticalMargin) / gridConfig.rows;
    $(container).empty();
    return $.each(config.elements, function(index, item) {
      var cell, height, left, top, width;
      width = p((item.width * cellWidth) + ((item.width - 1) * horizontalMargin));
      height = p((item.height * cellHeight) + ((item.height - 1) * verticalMargin));
      top = p((item.position.y * cellHeight) + ((item.position.y + 1) * verticalMargin));
      left = p((item.position.x * cellWidth) + ((item.position.x + 1) * horizontalMargin));
      cell = $('<div>').css({
        top: top,
        left: left,
        width: width,
        height: height,
        position: 'absolute',
        'overflow-y': 'auto'
      }).append($(item.view)).addClass('metro');
      return $(container).append(cell);
    });
  };
  return this;
};

if (typeof exports !== 'undefined') {
  exports.MetroMan = MetroMan;
} else {
  this.MetroMan = MetroMan;
}
of exports !== 'undefined') {
    exports.MetroMan = MetroMan;
  } else {
    this.MetroMan = MetroMan;
  }

}).call(this);
